#!/usr/bin/env node
'use strict';

const path = require('path');
const fs = require('fs');
const crypto = require('crypto');

const rootDir = '.';
const MODS = [
	{modGen: 8, mod: 'clover', name: 'Pokémon Clover', offset: 69000},
	{modGen: 8, mod: 'clovercap', name: 'Pokémon Clover CAP', offset: 42000},
	{modGen: 8, mod: 'cloverblobboscap', name: 'Create-a-Blobbos', offset: 69000},
	{modGen: 8, mod: 'sandbox', name: 'Sandbox'},
	{modGen: 8, mod: 'cope', name: 'Pokémon Cope'},
	{modGen: 8, mod: 'wack', name: 'Pokémon Wack', offset: 666000},
	{modGen: 8, mod: 'sburbmons', name: 'Sburbmon', offset: 413000},
	{modGen: 8, mod: 'sweet', name: 'Pokémon Sweet', offset: 999000},
	{modGen: 8, mod: 'clovertest', name: 'Pokémon Clover (2.0 Test)', offset: 69000},
	{modGen: 8, mod: 'copedraft', name: 'Pokémon Cope Draft'},
	{modGen: 8, mod: 'wipmons', name: 'WIPMons'},
];

// update version
function makeCachebuster(template, output) {
	let indexContents = fs.readFileSync(path.resolve(rootDir, template), {encoding: 'utf8'});

	// add hashes to js and css files
	process.stdout.write("Updating hashes... ");
	indexContents = indexContents.replace(/(src|href)="\.\/(.*?)\?[a-z0-9]*?"/g, function (a, b, c) {
		let hash = Math.random(); // just in case creating the hash fails
		try {
			const filename = c.replace('//play.pokemonshowdown.com/', '../../play.pokemonshowdown.com/');
			const fstr = fs.readFileSync(path.resolve(rootDir, 'dist', filename), 'utf8');
			hash = crypto.createHash('md5').update(fstr).digest('hex').substr(0, 8);
		} catch (e) {}

		return b + '="./' + c + '?' + hash + '"';
	}).replace(/\.template\.html/g, '.html');
	indexContents = indexContents.replace("<!--HERE BE MODS-->", MODS.map((mod, index) => `<input class="gen visually-hidden" type="radio" name="gen" value="${mod.modGen}:${mod.mod}" id="gen${mod.modGen}${mod.mod}" ${index === 0 ? 'checked="checked"' : ''} /><label class="btn btn-small btn-left" for="gen${mod.modGen}${mod.mod}">${mod.name}</label>`).join('\n'));
	process.stdout.write("Writing new `" + output + "` file... ");
	fs.writeFileSync(path.resolve(rootDir, output), indexContents);
	console.log("DONE");
}

function cpdir(src, dest) {
	console.log("Copying `" + src + "` to `" + dest + "`");
	try {
		fs.mkdirSync(dest, '0755');
	} catch(e) {
		if (e.code != 'EEXIST') throw e;
	}
	for (const file of fs.readdirSync(src)) {
		var current = fs.lstatSync(path.join(src, file));
		if (current.isDirectory()) {
			cpdir(path.join(src, file), path.join(dest, file));
		} else if (current.isSymbolicLink()) {
			var symlink = fs.readlinkSync(path.join(src, file));
			fs.symlinkSync(symlink, path.join(dest, file));
		} else if (file.endsWith('.js')) {
			let contents = fs.readFileSync(path.join(src, file), 'utf8').replace(/^exports.* = void 0;$/gm, '');
			// Minify the sets so we save bandwith
			if (src === 'src/js/data/sets') {
				const brkOpenIdx = contents.indexOf('{');
				contents = `${contents.slice(0, brkOpenIdx)}${JSON.stringify(JSON.parse(contents.slice(brkOpenIdx, -2)))};`
			}
			fs.writeFileSync(path.join(dest, file), contents);
		} else {
			fs.copyFileSync(path.join(src, file),path.join(dest, file));
		}
	}
}

if (process.argv[2] !== 'view') {
	require('child_process').execSync('npm --prefix calc/ run compile', {stdio: 'inherit'});
}

cpdir('src', 'dist');
cpdir('calc/dist', 'dist/calc');
makeCachebuster('dist/index.template.html', 'dist/index.html');
